import { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { calculateNutrition } from "../utils/nutritionCalculator";
import "../styles/NutritionSummary.css";
import FOODS from "../data/food";

// Food recommendations based on weight and calories
const getFoodRecommendations = (weight, calories, category) => {
  const recommendations = {
    grains: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏ß ‡πÅ‡∏õ‡πâ‡∏á",
      icon: "üçö",
      color: "#F59E0B",
      foods: [
        {
          name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢",
          image: "üçö",
          portion: weight < 60 ? "2-3 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏°‡∏∑‡πâ‡∏≠" : weight < 80 ? "3-4 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏°‡∏∑‡πâ‡∏≠" : "4-5 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 6-12 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏ß‡∏±‡∏ô",
          calories: "130 kcal/‡∏ó‡∏±‡∏û‡∏û‡∏µ"
        },
        {
          name: "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡πÇ‡∏Æ‡∏•‡∏ß‡∏µ‡∏ï",
          image: "üçû",
          portion: "2-3 ‡πÅ‡∏ú‡πà‡∏ô/‡∏ß‡∏±‡∏ô",
          detail: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏°‡∏•‡πá‡∏î",
          calories: "80 kcal/‡πÅ‡∏ú‡πà‡∏ô"
        },
        {
          name: "‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà/‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß",
          image: "üçú",
          portion: weight < 70 ? "1 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏°‡∏∑‡πâ‡∏≠" : "1.5 ‡∏ó‡∏±‡∏û‡∏û‡∏µ/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏°‡∏™‡∏∏‡∏Å",
          calories: "110 kcal/‡∏ó‡∏±‡∏û‡∏û‡∏µ"
        },
        {
          name: "‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏≠‡πä‡∏ï",
          image: "ü•£",
          portion: "¬Ω-1 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤",
          calories: "150 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        }
      ]
    },
    vegetables: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏±‡∏Å",
      icon: "ü•¨",
      color: "#10B981",
      foods: [
        {
          name: "‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß",
          image: "ü•¨",
          portion: "1-2 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤ ‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á ‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß",
          calories: "20-30 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        },
        {
          name: "‡∏ú‡∏±‡∏Å‡∏™‡∏µ‡∏™‡πâ‡∏°-‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á",
          image: "ü•ï",
          portion: "¬Ω-1 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô",
          detail: "‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó ‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®",
          calories: "30-50 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        },
        {
          name: "‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏´‡∏≠‡∏°",
          image: "ü•ó",
          portion: "1-2 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô",
          detail: "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏ó‡∏≥‡∏™‡∏•‡∏±‡∏î",
          calories: "10-15 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        },
        {
          name: "‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ‡πà",
          image: "ü•¶",
          portion: "¬Ω-1 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô",
          detail: "‡∏≠‡∏∏‡∏î‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ",
          calories: "30 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        }
      ]
    },
    fruits: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô)",
      icon: "üçé",
      color: "#F59E0B",
      foods: [
        {
          name: "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•",
          image: "üçé",
          portion: "1 ‡∏ú‡∏•/‡∏ß‡∏±‡∏ô",
          detail: "‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÇ‡∏ï‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
          calories: "80-100 kcal/‡∏ú‡∏•"
        },
        {
          name: "‡∏™‡πâ‡∏°",
          image: "üçä",
          portion: "1-2 ‡∏ú‡∏•/‡∏ß‡∏±‡∏ô",
          detail: "‡∏≠‡∏∏‡∏î‡∏°‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏ã‡∏µ",
          calories: "60-80 kcal/‡∏ú‡∏•"
        },
        {
          name: "‡∏ù‡∏£‡∏±‡πà‡∏á",
          image: "üçê",
          portion: "1-2 ‡∏ú‡∏•/‡∏ß‡∏±‡∏ô",
          detail: "‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏π‡∏á",
          calories: "50-70 kcal/‡∏ú‡∏•"
        },
        {
          name: "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®",
          image: "üçÖ",
          portion: "2-3 ‡∏ú‡∏•/‡∏ß‡∏±‡∏ô",
          detail: "‡∏ó‡∏≤‡∏ô‡∏™‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏∏‡∏Å",
          calories: "20-30 kcal/‡∏ú‡∏•"
        }
      ]
    },
    dairy: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏°‡πÄ‡∏ô‡∏¢",
      icon: "ü•õ",
      color: "#93C5FD",
      foods: [
        {
          name: "‡∏ô‡∏°‡∏™‡∏î‡∏à‡∏∑‡∏î",
          image: "ü•õ",
          portion: "1-2 ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô",
          detail: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥",
          calories: "100-150 kcal/‡πÅ‡∏Å‡πâ‡∏ß"
        },
        {
          name: "‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô",
          image: "ü•õ",
          portion: "1 ‡∏ñ‡πâ‡∏ß‡∏¢/‡∏ß‡∏±‡∏ô",
          detail: "‡∏≠‡∏∏‡∏î‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÑ‡∏ö‡πÇ‡∏≠‡∏ï‡∏¥‡∏Å",
          calories: "100-120 kcal/‡∏ñ‡πâ‡∏ß‡∏¢"
        },
        {
          name: "‡∏ô‡∏°‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á",
          image: "ü•§",
          portion: "1-2 ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô",
          detail: "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏û‡πâ‡∏ô‡∏°",
          calories: "80-100 kcal/‡πÅ‡∏Å‡πâ‡∏ß"
        },
        {
          name: "‡πÄ‡∏ô‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥",
          image: "üßÄ",
          portion: "1-2 ‡πÅ‡∏ú‡πà‡∏ô/‡∏ß‡∏±‡∏ô",
          detail: "‡∏≠‡∏∏‡∏î‡∏°‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°",
          calories: "70-90 kcal/‡πÅ‡∏ú‡πà‡∏ô"
        }
      ]
    },
    protein: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏±‡∏ô",
      icon: "ü•©",
      color: "#EF4444",
      foods: [
        {
          name: "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á",
          image: "üçó",
          portion: weight < 60 ? "3-4 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞/‡∏°‡∏∑‡πâ‡∏≠" : weight < 80 ? "4-5 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞/‡∏°‡∏∑‡πâ‡∏≠" : "5-6 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏Å‡πÑ‡∏Å‡πà",
          calories: "165 kcal/100g"
        },
        {
          name: "‡∏õ‡∏•‡∏≤",
          image: "üêü",
          portion: "4-6 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞/‡∏°‡∏∑‡πâ‡∏≠",
          detail: "‡∏≠‡∏∏‡∏î‡∏°‡πÇ‡∏≠‡πÄ‡∏°‡∏Å‡πâ‡∏≤ 3",
          calories: "120-180 kcal/100g"
        },
        {
          name: "‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà",
          image: "ü•ö",
          portion: "1-2 ‡∏ü‡∏≠‡∏á/‡∏ß‡∏±‡∏ô",
          detail: "‡∏ï‡πâ‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≠‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô",
          calories: "70 kcal/‡∏ü‡∏≠‡∏á"
        },
        {
          name: "‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ",
          image: "ü´ò",
          portion: "2-3 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞/‡∏ß‡∏±‡∏ô",
          detail: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡∏ä",
          calories: "80 kcal/100g"
        }
      ]
    },
    fats: {
      title: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠",
      icon: "ü´ó",
      color: "#FCD34D",
      foods: [
        {
          name: "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä",
          image: "ü´ó",
          portion: weight < 70 ? "2-3 ‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤/‡∏ß‡∏±‡∏ô" : "3-4 ‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤/‡∏ß‡∏±‡∏ô",
          detail: "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏°‡∏∞‡∏Å‡∏≠‡∏Å ‡∏Ñ‡∏≤‡πÇ‡∏ô‡∏•‡∏≤",
          calories: "40 kcal/‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤"
        },
        {
          name: "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•",
          image: "üçØ",
          portion: "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤/‡∏ß‡∏±‡∏ô",
          detail: "‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
          calories: "16 kcal/‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤"
        },
        {
          name: "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠",
          image: "üßÇ",
          portion: "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡πâ‡∏≠‡∏ô‡∏ä‡∏≤/‡∏ß‡∏±‡∏ô",
          detail: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2,000 mg ‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°",
          calories: "0 kcal"
        },
        {
          name: "‡∏≠‡πÇ‡∏ß‡∏Ñ‡∏≤‡πÇ‡∏î",
          image: "ü•ë",
          portion: "¬º-¬Ω ‡∏ú‡∏•/‡∏ß‡∏±‡∏ô",
          detail: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥",
          calories: "80 kcal/¬º‡∏ú‡∏•"
        }
      ]
    }
  };
  
  return recommendations[category] || null;
};

function NutritionSummaryPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const state = location.state;

  const [selectedFoods, setSelectedFoods] = useState({});
  const [showModal, setShowModal] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(null);

  useEffect(() => {
    if (!state || !state.weight || !state.activityLevel) {
      navigate("/");
    }
  }, [state, navigate]);

  if (!state || !state.weight || !state.activityLevel) {
    return null;
  }

  const nutritionData = calculateNutrition({
    weight: state.weight,
    height: state.height,
    age: state.age,
    gender: state.gender,
    activityLevel: parseFloat(state.activityLevel),
    hasDiabetes: state.hasDiabetes || false,
    hasHypertension: state.hasHypertension || false,
  });

  const handlePyramidClick = (categoryId) => {
    setSelectedCategory(categoryId);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedCategory(null);
  };

  const currentRecommendation = selectedCategory 
    ? getFoodRecommendations(state.weight, nutritionData.calories, selectedCategory)
    : null;

  const handleFoodQuantityChange = (foodId, change) => {
    setSelectedFoods((prev) => {
      const current = prev[foodId] || 0;
      const newQuantity = Math.max(0, current + change);
      if (newQuantity === 0) {
        const { [foodId]: removed, ...rest } = prev;
        return rest;
      }
      return { ...prev, [foodId]: newQuantity };
    });
  };

  const handleSave = () => {
    const selectedFoodData = Object.entries(selectedFoods).map(
      ([id, quantity]) => {
        const food = FOODS.find((f) => f.id === parseInt(id));
        return { ...food, quantity };
      }
    );

    const totalNutrition = selectedFoodData.reduce(
      (acc, food) => ({
        calories: acc.calories + food.calories * food.quantity,
        protein: acc.protein + food.protein * food.quantity,
        fat: acc.fat + food.fat * food.quantity,
        carbs: acc.carbs + food.carbs * food.quantity,
      }),
      { calories: 0, protein: 0, fat: 0, carbs: 0 }
    );

    navigate("/summary-data", {
      state: {
        ...state,
        ...nutritionData,
        selectedFoods: selectedFoodData,
        totalNutrition,
      },
    });
  };

  return (
    <div className="nutrition-main-container">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-12 col-lg-10">
            <button className="back-button" onClick={() => navigate("/")}>
              <svg 
                width="24" 
                height="24" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2" 
                strokeLinecap="round" 
                strokeLinejoin="round"
              >
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
              <span>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</span>
            </button>

            <div className="title-section">
              <div className="d-flex align-items-center justify-content-center mb-2">
                <h2>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</h2>
              </div>
              <p>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {state.weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°</p>
              <p className="small text-muted">
                BMI: {nutritionData.bmi} ({nutritionData.bmiCategory})
              </p>
            </div>

            <div className="card p-4 mb-4 pyramid-card">
              <h3 className="pyramid-title">‡∏ò‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</h3>
              <p className="pyramid-subtitle">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</p>
              
              <div className="pyramid-container">
                <svg 
                  viewBox="0 0 400 500" 
                  style={{ width: '100%', maxWidth: '500px', height: 'auto' }}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  {/* ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 4 - ‡∏Ç‡πâ‡∏≤‡∏ß ‡πÅ‡∏õ‡πâ‡∏á (‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î - ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏î) */}
                  <g 
                    onClick={() => handlePyramidClick('grains')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 20 350 L 380 350 L 350 500 L 50 500 Z"
                      fill="#F59E0B"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="200" y="410" textAnchor="middle" fill="white" fontSize="40">üçö</text>
                    <text x="200" y="445" textAnchor="middle" fill="white" fontSize="18" fontWeight="600">‡∏Ç‡πâ‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏õ‡πâ‡∏á</text>
                    <text x="200" y="470" textAnchor="middle" fill="white" fontSize="14" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: 7-9 ‡∏ó‡∏±‡∏û‡∏û‡∏µ</text>
                  </g>

                  {/* ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 3 - ‡∏ú‡∏±‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡πÅ‡∏ö‡πà‡∏á 2 ‡∏ù‡∏±‡πà‡∏á) */}
                  <g 
                    onClick={() => handlePyramidClick('vegetables')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 50 230 L 200 230 L 220 350 L 20 350 Z"
                      fill="#10B981"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="120" y="275" textAnchor="middle" fill="white" fontSize="38">ü•¨</text>
                    <text x="120" y="308" textAnchor="middle" fill="white" fontSize="16" fontWeight="600">‡∏ú‡∏±‡∏Å</text>
                    <text x="120" y="328" textAnchor="middle" fill="white" fontSize="13" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: 4 ‡∏ó‡∏±‡∏û‡∏û‡∏µ</text>
                  </g>

                  <g 
                    onClick={() => handlePyramidClick('fruits')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 200 230 L 350 230 L 380 350 L 220 350 Z"
                      fill="#F59E0B"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="280" y="275" textAnchor="middle" fill="white" fontSize="38">üçé</text>
                    <text x="280" y="308" textAnchor="middle" fill="white" fontSize="16" fontWeight="600">‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô)</text>
                    <text x="280" y="328" textAnchor="middle" fill="white" fontSize="13" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: 1-3 ‡∏™‡πà‡∏ß‡∏ô</text>
                  </g>

                  {/* ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2 - ‡∏ô‡∏°‡πÄ‡∏ô‡∏¢ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå (‡πÅ‡∏ö‡πà‡∏á 2 ‡∏ù‡∏±‡πà‡∏á) */}
                  <g 
                    onClick={() => handlePyramidClick('dairy')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 90 120 L 200 120 L 200 230 L 50 230 Z"
                      fill="#93C5FD"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="145" y="160" textAnchor="middle" fill="white" fontSize="35">ü•õ</text>
                    <text x="145" y="190" textAnchor="middle" fill="white" fontSize="15" fontWeight="600">‡∏ô‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏°‡πÄ‡∏ô‡∏¢</text>
                    <text x="145" y="210" textAnchor="middle" fill="white" fontSize="12" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: 1-2 ‡πÅ‡∏Å‡πâ‡∏ß</text>
                  </g>

                  <g 
                    onClick={() => handlePyramidClick('protein')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 200 120 L 310 120 L 350 230 L 200 230 Z"
                      fill="#EF4444"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="255" y="160" textAnchor="middle" fill="white" fontSize="35">ü•©</text>
                    <text x="255" y="190" textAnchor="middle" fill="white" fontSize="15" fontWeight="600">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏±‡∏ô</text>
                    <text x="255" y="210" textAnchor="middle" fill="white" fontSize="12" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: 6-8 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞</text>
                  </g>

                  {/* ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 - ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ (‡∏ö‡∏ô‡∏™‡∏∏‡∏î - ‡πÅ‡∏Ñ‡∏ö‡∏™‡∏∏‡∏î) */}
                  <g 
                    onClick={() => handlePyramidClick('fats')}
                    style={{ cursor: 'pointer' }}
                    className="pyramid-svg-level"
                  >
                    <path
                      d="M 140 20 L 260 20 L 280 120 L 120 120 Z"
                      fill="#FCD34D"
                      stroke="#fff"
                      strokeWidth="3"
                    />
                    <text x="200" y="55" textAnchor="middle" fill="white" fontSize="32">ü´ó</text>
                    <text x="200" y="82" textAnchor="middle" fill="white" fontSize="14" fontWeight="600">‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠</text>
                    <text x="200" y="100" textAnchor="middle" fill="white" fontSize="12" opacity="0.9">‡∏ß‡∏±‡∏ô‡∏•‡∏∞: ‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î</text>
                  </g>
                </svg>
              </div>
              
              <div className="pyramid-footer">
                <p className="pyramid-note">
                  üí° ‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
                </p>
              </div>
            </div>

            {(state.hasDiabetes || state.hasHypertension) && (
              <div className="card p-3 mb-4 bg-warning bg-opacity-10">
                <p className="mb-0 text-center">
                  <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong>{" "}
                  ‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                  {state.hasDiabetes && " (‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô)"}
                  {state.hasDiabetes && state.hasHypertension && " ‡πÅ‡∏•‡∏∞"}
                  {state.hasHypertension && " (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á)"}
                </p>
              </div>
            )}

            <div className="text-center mb-4">
              <button className="btn-lg save-btn" onClick={handleSave}>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
              </button>
            </div>
          </div>
        </div>
      </div>

      {showModal && currentRecommendation && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="modal-close-button" onClick={closeModal}>
              <svg 
                width="24" 
                height="24" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2" 
                strokeLinecap="round" 
                strokeLinejoin="round"
              >
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
            
            <div className="modal-header">
              <span className="modal-icon">{currentRecommendation.icon}</span>
              <h3 className="modal-title">{currentRecommendation.title}</h3>
            </div>

            <div className="modal-body">
              <div className="food-grid">
                {currentRecommendation.foods.map((food, index) => (
                  <div key={index} className="food-recommendation-card">
                    <div className="food-image">{food.image}</div>
                    <h4 className="food-name-modal">{food.name}</h4>
                    <div className="food-portion-box">
                      <strong>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong>
                      <p className="food-portion-text">{food.portion}</p>
                    </div>
                    <p className="food-detail">{food.detail}</p>
                    <div className="food-calories-badge">{food.calories}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="modal-footer">
              <p className="modal-footer-text">
                üí° ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {state.weight} ‡∏Å‡∏Å. ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {nutritionData.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà/‡∏ß‡∏±‡∏ô
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default NutritionSummaryPage;